#include "bot.h"
#include <QDebug>

bot::bot(QObject *parent) : QObject(parent)
{
    crypt = new NosCrypto(this);    //manages decrypting and encrypting Packets
    socket = new QTcpSocket(this);  //TCP connection
    loginServer = true;             //first server we connect to is the login Server so this is set to true
    sid = 0;                        //Session ID needed for encrypting game Packets. We recieve it from the Login Server in the NSTEST packet
    pid = 0;                        //Packet ID generated by us increments by one evry time it gets used
    gameip = "";                    //game Server IP
    gameport =0;                    //game Server Port
    loggedin = false;               //was the login successfull?
    username = "";
    password = "";
    character = 0;                  //id of the character we want to use
    keepAlive = new QTimer(this);   //Timer to send the pulse packet every 60 sec or we get disconnected
    timer = new QTimer(this);
    runtime = 0;                   //minutes we are ingame
    master = 92040;                 //your Id here
    masterX = 0;
    masterY = 0;
    slaveX = 0;
    slaveY = 0;
    xDiff = 0;
    yDiff = 0;
    connect(socket,SIGNAL(connected()),this,SLOT(connected()));         //Calls the connected method when we establish a connection
    connect(socket,SIGNAL(disconnected()),this,SLOT(disconnected()));   //same for disconnecting
    connect(socket,SIGNAL(readyRead()),this,SLOT(recievedPacket()));    //and recieving a Packet from the Server
    connect(keepAlive,SIGNAL(timeout()),this,SLOT(sendPulsePacket()));  //send the pulse packet when the timer says so
}

//Send a encrypted packet to the connected Server
void bot::send(QString packet, bool loginserver)
{
    Q_UNUSED(loginserver)//Remove warning for unused parameter
    emit showMsg("> "+packet);
    socket->write(encrypt(QString::number(getPid())+" "+packet));
}

//start the Login Process saves the input from the ui.
void bot::login(QString username, QString password, QString lip, qint16 lport, QString gip, qint16 gport, int ch)
{
    qDebug()<<"Login button clicked!";
    this->username = username;
    this->password = password;
    this->gameip = gip;
    this->gameport = gport;
    this->character = ch;
    connectTo(lip,lport); //starts connection to login server
}

void bot::connected()
{
    //When we connect to the login Server generate the Login Packet and send it
    if(loginServer){
        qDebug()<<"Connected to login Server sending Login!";
        socket->write(crypt->createLoginPacket(username,password));
    }else{
    //When connected to game server start authentication
        QString temp = QString::number(getPid())+" "+QString::number(sid);
        QByteArray temp2 = crypt->encryptGamePacket(temp,sid,true);
        qDebug()<<"Connected to game Server sending PID!"+ temp <<temp2;
        socket->write(temp2);                                               //first packet we send is the session id
        QTimer::singleShot(1000, this, SLOT(loginHelper()));                //wait 1sec and call loginHelper Method
    }
}

void bot::recievedPacket()
{
    //qDebug()<<"Recieved Packet";
    QStringList packets = decrypt(socket->readAll());   //Decrypt recieved packet
    foreach (QString packet, packets) {                 //The server sometimes sends more than one packet at a time so we go through evry one of it
        QStringList packs;
        packs = packet.replace("\n","").split(" ");
        //qDebug()<<packs;
        emit showMsg("< "+packet);                      //send recieved packet to the ui
        if(loginServer){
            if(packs[0]=="NsTeST"){                     //if we recieve the NsTEST packet from the login Server our login was successfull
                sid = packs[1].toInt();
                qDebug()<<"Succesfully logged in! sid = "+QString::number(sid); //saves the Session ID and disconnects
                loggedin = true;
                socket->close();
            }
        }else{
            if(packs[0]=="clist_end"){                          //selects which character we want to play
                send("select "+QString::number(character));
            }
            if(packs[0]=="OK"){                                 //spawns your character in the world
                send("game_start");
                keepAlive->start(60000);
            }
            // mv 1 92040 25 26 12
            // at 92040 2560 2 23 5 0 53 1 -1
            // send("walk "+packs[3]+" "+packs[4]+" 0 12");
            if(packs[0]=="at"){
                slaveX = packs[5].toInt();
                slaveY = packs[4].toInt();
            }
            if(packs[0]=="mv" && packs[2]=="92040"){
                masterX = packs[3].toInt();
                masterY = packs[4].toInt();
                masterX > slaveX ? xDiff = masterX - slaveX : xDiff = slaveX - masterX;
                masterY > slaveY ? yDiff = masterY - slaveY : yDiff = slaveY - masterY;
                if(xDiff > 2 || yDiff > 2){
                    connect(timer, SIGNAL(timeout()), this, SLOT(update()));
                    timer->start(500);

                    }
                }
            }
        }

    }

void bot::update()
{
    if(masterX > slaveX){
        slaveX += 2;
        xDiff < 2 ? xDiff = 0 : xDiff -= 2;
    }
    else{
        slaveX < 2 ? slaveX = 0 : slaveX -= 2;
        xDiff < 2 ? xDiff = 0 : xDiff -= 2;
    }
    if(masterY > slaveY){
        slaveY += 2;
        yDiff < 2 ? yDiff = 0 : yDiff -= 2;
    }
    else{
        slaveY < 2 ? slaveY = 0 : slaveY -= 2;
        yDiff < 2 ? yDiff = 0 : yDiff -= 2;
    }
    send("walk "+QString::number(slaveX)+" "+QString::number(slaveY)+" 0 12");
    if(xDiff == 0 && yDiff == 0){
        timer->stop();
    }
}


void bot::disconnected()
{
    qDebug()<<"Disconnected";
    if(loggedin&&loginServer){          //if we disconnected from the slogin server and to login was successfull
        loginServer = false;            //connect to the gameserver
        connectTo(gameip,gameport);
    }
}

//login to game server
void bot::loginHelper()
{
    qDebug()<<"Sending username and password";
    send(username);
    send(password);
}

//encrypts a packet if we are connected to the game server
QByteArray bot::encrypt(QString packet, bool loginserver)
{
    Q_UNUSED(loginserver)
    if(!loginServer){
        return crypt->encryptGamePacket(packet,sid,false);
    }else{
        return "";
    }

}

//Returns and generates Packet ID, increments by one evry call
int bot::getPid()
{
    if(pid==0){
        pid = crypt->randomNumber(20000,99999);
    }
    pid++;
    qDebug()<< "pid = " << pid;
    return pid;
}

//decrypts a Packed using the right decryption
QStringList bot::decrypt(QByteArray msg)
{
    if(loginServer){
        QString temp;
        temp = crypt->decryptLoginPacket(msg,msg.length());
        return {temp};
    }else{
        return crypt->decryptGamePacket(msg,msg.size());
    }
}

//increments runtime and sends pulse packet
void bot::sendPulsePacket()
{
    runtime++;
    send("pulse "+QString::number(runtime*60)+" 0",false);
}

void bot::connectTo(QString ip, quint16 port)
{
    socket->connectToHost(ip,port);
    qDebug()<<"Connecting to Server!";
}


